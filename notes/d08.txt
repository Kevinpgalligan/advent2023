## Brainstorming
Let S_i for 1<=i<=N be the number of steps to reach each end state the path encounters, before entering a loop, and define k such that for all i>=k, S_i occurred within the loop.

Also let L be the number of steps in the loop.

Then each path will have the following number of steps till an end state.

S_1, S_2, ..., S_{k-1},

AND, for j>=0,
S_k+jL
S_{k+1}+jL
...
S_N+jL

Now, across all sets of paths, need to find smallest number of steps.

Given two sets...

S_k     + i L_1
S_{k+1} + i L_1
...
S_N1    + i L_1

and

Z_k     + j L_2
Z_{k+1} + j L_2
...
Z_N2    + j L_2

To find matches between these sets, need to find i & j such that:
   S_* + i L_1 = Z_* + j L_2
for any S_* and Z_*.

Simple approach from there: pick a particular path, for each end state it encounters find the earliest match with all other paths? Not sure how intensive that'd be.

            set of all paths (num steps)
              v
min_s { s \in S \forall S }
        -> \exists i : S_k + i L_k = s
           For a given s... check that s-S_k>=0 and L_k divides s-S_k.

Okay, but how to generate values of s? We don't want to try s=1,2,...
One approach: take a particular path, for each of its end states find
the min number of steps it takes to coincide with all other paths.
Is it possible that a path will NEVER be in a specific end state at the same time as all the other paths are in end states? Yes. Imagine there are two paths that have a loop of the same length.

There may be a way to detect that? Using gcd magic, perhaps.
Reconsider any pair of end states from different paths.
   S_* + i L_1 = Z_* + j L_2
We need i and j such that:
   i L_1 - j L_2 = Z_* - S_*
This only has solutions if gcd(L_1, L_2) divides Z_*-S_*, otherwise the equation can't be true.

Does it make sense to find G=gcd(L_1, L_2, ..., L_whatever)...
Then, for Z_*, we need S_* such that S_* = Z_* (mod G).
I'm not sure about this. Need to think more. 


## Brainstorming from work laptop
S_1,1 + i L_1
S_1,2 + i L_1
...
S_1,{n_1} + i L_1

S_2,1 + i L_2
S_2,2 + i L_2
...
S_2,{n_2} + i L_2

...

Let's say we have a matching pair:
    S_1,x + i_1 L_1
          =
    S_2,y + i_2 L_2

This requires that gcd(L1,L2) divides S_{1,x}-S_{2,y}.
   
If we want to find a 3rd match, we need...

    gcd(L1,L3) divides S_{1,x}-S_{3,z}
    gcd(L2,L3) divides S_{2,y}-S_{3,z}

Is it equivalent to say...

    gcd(L1,L2,L3) divides:
      S_{1,x}-S_{2,x}
      S_{1,x}-S_{3,z}
      S_{2,y}-S_{3,z}

?

Hmm, I don't think so.
Since
  gcd(L1,L2,L3) <= gcd(L1,L2),
I think `gcd(L1,L2)|S_{1,x}-S_{2,y}` implies that `gcd(L1,L2,L3)|...`, but not
vice versa. Could end up with gcd(L1,...,LN)=1 and it'd pass all the constraints.

Okay, so how to find a number of steps that satisfies at least one constraint from each bucket?

What we're looking for!
min_s {s \in natnums : \foreach i \in 1..P \exists a,b s.t. s = S_{i,a} + b L_i}

To generate step counts that ensure the first path is on a final state...
Just loop through S_1,1 -> S_1,{n_1} on repeat, adding L_1 after each iteration.
Could then check if the step count s satisfies (s%L_i)\in{S_{i,1}, ..., S_{i,n_i}}
(Not quite... but almost. Edge case, what if S_{i,1}>=L_i?)

Okay, let's get stupid again. We saw there are ~5 start states. What if each of those states results in a loop with only 6 end states. There would only be ~7000 combinations of all those end states, which is feasible to bruteforce.

Step 1: calculate loops.
Step 2: come up with a way to satisfy each set of possibilities.
        S_1 + i_1 L_1 = s
        S_2 + i_2 L_2 = s
        ...
        S_N + i_N L_N = s
        ^          ^ known
        known
        That's... N+1 unknowns and N equations.
        Hmm, maybe it's important that s (and the i's) have infinitely
        many solutions, there's a "free variable" somewhere.

        S_1+i_1L_1 = S_2+i_2L_2 = ... = s

        Can use GCD trick to ensure that it's POSSIBLE, at least.
        S_1 + i_1 L_1 = S_2 + i_2 L_2
        Maybe find one pair first, giving i_1 and i_2. All future
        synchs will have to be multiples of those, right? Which can
        be used to find i_3????

        s1 + i1 L1 = s2 + i2 L2
        i1 = L1^-1 (s2-s1)   (mod L2)
        i1 = L1^-1 (s3-s1)   (mod L3)

        Given...
        x = a1  (mod m1)
        x = a2  (mod m2)
        ...
        This is the Chinese remainder theorem! the m_i must be pairwise coprime,
        gcd(m_i,m_j)=1 for all i,j.
        See:
          https://en.wikipedia.org/wiki/Chinese_remainder_theorem#Computation
        Wiki also mentions the case where the loop lengths are non-coprime.
        In that case, the solutions must all be equivalent modulo gcd(L1,...LN) (I think).

Step 3: pick the minimum.
