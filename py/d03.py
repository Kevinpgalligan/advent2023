import re
with open("input03", "r") as f:
    X = f.read().split("\n")
W = len(X[0])
result = 0
mask = []
ns = []
for i, row in enumerate(X):
    for m in re.finditer("[0-9]+", row):
        isAdj = False
        for j in range(m.start(), m.end()):
            for ni, nj in [(i-1, j-1), (i-1,j), (i-1,j+1),
                           (i,j-1),(i,j+1),
                           (i+1,j-1),(i+1,j),(i+1,j+1)]:
                if ni>=0 and nj>=0 and ni<W and nj < W:
                    c = X[ni][nj]
                    if not (c.isdigit() or c == "."):
                        isAdj = True
        n = int(m.group(0))
        if isAdj:
            result += n
            mask.append(1)
            ns.append(n)
        else:
            mask.append(0)
#print(" ".join(map(str, mask)))
#print(" ".join(map(str, ns)))
print(result)
j_nums = list(map(intsplit(" ")))
print(j_nums == ns)
print(len(j_nums), len(ns))
j_nums = set(j_nums)
ns = set(ns)
print("J not Py:", j_nums - ns)
print("Py not J:", ns - j_nums)

#syms = [c for c in s if not (c.isdigit() or c == ".")]
#pyout = "".join(syms)
jout = "+*+*==*=-****=**&*****#*/**+*%%*****%+$***=*$*****$+**=*%-#**=*/*-*&=+**+&*--*#**&***&$*+***-*@##-*@*/-$*@****+/*=****=$==***@****/-&*$$&%**-*+*@*&*$%%+**%*/*/&*****@**=*@***&*/+*/**$**=*$*+*=#****%$@**=/$*=@=@%@%**@%$%%++**=-@***+&*$****$%#$*/=/*&&*=++-+***+$@$****$@****=%-/-/+$%+*$*+-**=-*+*$/@%$*-***&##***/*=+***&#*@-//%***@**+$=@+$&/**/**@*//#-*@*%*&*#*******&/**/=****#-$%***/***&***-+/%**+=**%*/*%*=*-+@=*%+#=/**&=*&*/**/*/%*$=&*-+**&*/-+@*+***=***%+**#**/$*&$+%&*@******/*+****=*+-**=*-=**-=*##&*/*-*#*****$*%#+*=%/*/*/**#*****&*%*+++%***%*@=+*%+@=$**@/******$$@**%-@**&$-#**%*#*-=**+&*++**//**/&*-$-+/*&***&@*#+*****$*%***#***=/******@-@/%**&*=**$&**%#+*%**@$***/@***$**#$=****+@&+//*/*$%**@*****=@%****$***/*$**@$*+*$+=&@*****$+**$**"
#print(len(s))
#print(pyout)
#print(len(syms))
#print(pyout == jout)
